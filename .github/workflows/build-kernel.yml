name: Build Kernel


on:
  workflow_dispatch:


jobs:
  build-kernel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          echo "ANYKERNEL_SOURCE=$(cat config.env | grep -w "ANYKERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ANYKERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "ANYKERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE=$(cat config.env | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_CONFIG=$(cat config.env | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "BUILD_ARGS=$(cat config.env | grep -w "BUILD_ARGS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
          sudo apt-get update
          wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb
          sudo apt install ./libtinfo5_6.3-2ubuntu0.1_amd64.deb
          sudo apt install -y libselinux-dev bc bison flex libssl-dev libelf-dev make libc6-dev-i386 dwarves gcc-aarch64-linux-gnu dkms bc mokutil build-essential linux-headers-`uname -r` clang
      - name: Pull toolchain (ARM GNU Toolchain)
        run: |
          # Download ARM GNU Toolchain für aarch64
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
          mkdir aarch64-toolchain
          tar -xf arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz -C aarch64-toolchain --strip-components=1

          # Download ARM GNU Toolchain für arm (32 Bit)
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-linux-gnueabihf.tar.xz
          mkdir arm-toolchain
          tar -xf arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-linux-gnueabihf.tar.xz -C arm-toolchain --strip-components=1

          # Clang herunterladen und entpacken
          mkdir -p clang
          curl -sL https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android14-dev/clang-r487747c.tar.gz | tar -xz -C clang/

          # Überprüfen, ob die Binaries existieren
          if [ ! -d "aarch64-toolchain" ] || [ ! -d "arm-toolchain" ] || [ ! -d "clang" ]; then
            echo "Fehler: Toolchains wurden nicht korrekt heruntergeladen oder entpackt."
            exit 1
          fi
      - name: Pull kernel source
        run: |
           git clone --depth=1 https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/ViP3R-KERNELs/android_kernel_google_zumapro.git -b ${{ env.KERNEL_SOURCE_BRANCH }} kernel-source

      - name: KernelSU
        run: |
          cd kernel-source
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5
          cd ..

      - name: Build kernel
        run: |
          export KBUILD_BUILD_USER="2olegion"
          export PATH=$GITHUB_WORKSPACE/clang/bin:${PATH}
          args="                  ARCH=arm64 \
                                  O=../out \
                                  ${{ env.BUILD_ARGS }} \
                                  CLANG_TRIPLE=aarch64-linux-gnu- \
                                  CROSS_COMPILE=$GITHUB_WORKSPACE/aarch64-linux-android-4.9/bin/aarch64-linux-android- \
                                  CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/arm-linux-androideabi-4.9/bin/arm-linux-androideabi- "
          cd kernel-source
          clang -v
          make clean && make mrproper
          make ${args} ${{ env.KERNEL_CONFIG }}
          make -j$(nproc --all) ${args}

      - name: Package kernel
        run: |
          git clone --depth=1 ${{ env.ANYKERNEL_SOURCE }} -b ${{ env.ANYKERNEL_SOURCE_BRANCH }} AnyKernel3 && rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [ -f out/arch/arm64/boot/dtbo.img ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi

      - name: Upload kernel to artifact
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_kernel
          path: AnyKernel3/*
